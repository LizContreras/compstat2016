geom_line(color = "darkgray") +
geom_point(size = 1.2)
ggplot(frec_rel_df, aes(x = lanza_mil, y = frec_rel)) +
geom_hline(yintercept = 0.5, color = "red") +
geom_line(color = "darkgray") +
geom_point(size = 1.2)
lanza2_mil <- function(n = 1000){
lanzamientos <- sample(c("A", "S"), n, replace = TRUE)
frec_rel <- cumsum(lanzamientos == "A") / 1:n
data.frame(lanzamiento = 1:n, frecuencia_relativa = frec_rel)
}
head (lanza2_mil())
tail (lanza2_mil())
ggplot(lanzamientos_3, aes(x = log(lanzamiento), y = frecuencia_relativa,
color = factor(.n))) +
geom_hline(yintercept = 0.5, color = "darkgray") +
geom_line() +
scale_x_continuous("lanzamiento", labels = exp,
breaks = log(sapply(0:10, function(i) 2 ^ i)))
geom_text(data = filter(lanzamientos_3, log(lanzamiento) == 1000),
aes(label = round(frecuencia_relativa, 2)), y = c(0.5, 0.46, 0.54),
size = 3, hjust = 0)
lanza3 <- rdply(3, lanza_mil)
head(lanza3)
lanza3 <- function(n = 1000){
lanzamientos <- sample(c("A", "S"), n, replace = TRUE)
frec_rel <- cumsum(lanzamientos == "S") / 1:n
data.frame(lanzamiento = 1:n, frecuencia_relativa = frec_rel)
}
head(lanza3())
tail (lanza3())
lanzar3 <- function(n = 1000){
lanzamientos <- sample(c("A", "S"), n, replace = TRUE)
frec_rel <- cumsum(lanzamientos == "S") / 1:n
data.frame(lanzamiento = 1:n, frecuencia_relativa = frec_rel)
}
lanza3 <- rdply(3, lanzar3)
head(lanza3)
tail (lanza3)
ggplot(lanza3, aes(x = log(lanzamiento), y = frecuencia_relativa,                      color = factor(.n))) +
geom_hline(yintercept = 0.5, color = "darkgray") +
geom_line() +
scale_x_continuous("lanzamiento", labels = exp,
breaks = log(sapply(0:10, function(i) 2 ^ i)))
geom_text(data = filter(lanzamientos_3, log(lanzamiento) == 1000),
aes(label = round(frecuencia_relativa, 2)), y = c(0.5, 0.46, 0.54),
size = 3, hjust = 0)
geom_text(data = filter(lanza3, log(lanzamiento) == 1000),
aes(label = round(frecuencia_relativa, 2)), y = c(0.5, 0.46, 0.54),
size = 3, hjust = 0)
geom_text(data = filter(lanza3),
aes(label = round(frecuencia_relativa, 2)), y = c(0.5, 0.46, 0.54),
size = 3, hjust = 0)
geom_text(lanza3,
aes(label = round(frecuencia_relativa, 2)), y = c(0.5, 0.46, 0.54),
size = 3, hjust = 0)
geom_text(data = filter(lanza3, log(lanzamiento) == 1000),
aes(label = round(frecuencia_relativa, 2)), y = c(0.5, 0.46, 0.54),
size = 3, hjust = 0)
library(ggplot2,  comment=FALSE, warning=FALSE)
lanza4 <- rdply(3, lanza_mil)
head(lanza3)
lanzar3 <- function(n = 1000000){
lanzamientos <- sample(c("A", "S"), n, replace = TRUE)
frec_rel <- cumsum(lanzamientos == "S") / 1:n
data.frame(lanzamiento = 1:n, frecuencia_relativa = frec_rel)
}
head (lanzar4())
tail (lanzar4())
head (lanza4())
lanza4 <- rdply(3, lanza_mil)
head(lanza3)
lanzar4 <- function(n = 1000000){
lanzamientos <- sample(c("A", "S"), n, replace = TRUE)
frec_rel <- cumsum(lanzamientos == "S") / 1:n
data.frame(lanzamiento = 1:n, frecuencia_relativa = frec_rel)
}
head (lanza4())
head (lanzar4())
tail (lanzar4())
lanza3 <- rdply(3, lanzar4)
lanza4 <- lanza3
head (lanza4)
tail (lanza4)
ggplot(lanza4, aes(x = log(lanzamiento), y = frecuencia_relativa,                      color = factor(.n))) +
geom_hline(yintercept = 0.5, color = "darkgray") +
geom_line() +
scale_x_continuous("lanzamiento", labels = exp,
breaks = log(sapply(0:10, function(i) 2 ^ i)))
lanza_10 <- sample(c("1", "2", "3", "4", "5", "6"), 10, replace = TRUE)
lanza_10
sum <- cumsum(lanza_10 == "4")
sum
relativa <- round(sum / 1:10, 2)
relativa
library(ggplot2)
n <- 1000
lanza_mil <- sample(c("1", "2", "3", "4", "5", "6"), n, replace = TRUE)
frec_rel <- cumsum(lanza_mil == "4") / 1:n
frec_rel_df <- data.frame(lanza_mil = 1:n, frec_rel = frec_rel)
head (frec_rel_df)
tail (frec_rel_df)
ggplot(frec_rel_df, aes(x = lanza_mil, y = frec_rel)) +
geom_hline(yintercept = 0.5, color = "red") +
geom_line(color = "darkgray") +
geom_point(size = 1.2)
library(plyr)
lanza3 <- rdply(3, lanza_mil)
head(lanza3)
lanzar3 <- function(n = 1000){
lanzamientos <- sample(c("1", "2", "3", "4", "5", "6"), n, replace = TRUE)
frec_rel <- cumsum(lanzamientos == "4") / 1:n
data.frame(lanzamiento = 1:n, frecuencia_relativa = frec_rel)
}
head (lanzar3())
tail (lanzar3())
lanza3 <- rdply(3, lanzar3)
head (lanza3)
tail (lanza3)
ggplot(lanza3, aes(x = log(lanzamiento), y = frecuencia_relativa,                      color = factor(.n))) +
geom_hline(yintercept = 0.16, color = "darkgray") +
geom_line() +
scale_x_continuous("lanzamiento", labels = exp,
breaks = log(sapply(0:10, function(i) 2 ^ i)))
```{r, echo=FALSE, comment=FALSE, warning=FALSE}
library(plyr)
lanzar4 <- function(n = 100000){
lanzamientos <- sample(c("1", "2", "3", "4", "5", "6"), n, replace = TRUE)
frec_rel <- cumsum(lanzamientos == "4") / 1:n
data.frame(lanzamiento = 1:n, frecuencia_relativa = frec_rel)
}
head (lanzar4())
tail (lanzar4())
lanza4 <- rdply(3, lanzar4)
head (lanza4)
tail (lanza4)
ggplot(lanza4, aes(x = log(lanzamiento), y = frecuencia_relativa,                      color = factor(.n))) +
geom_hline(yintercept = 0.16, color = "darkgray") +
geom_line() +
scale_x_continuous("lanzamiento", labels = exp, breaks = log(sapply(0:10, function(i) 2 ^ i)))
lanzar <- c("A", "S")
lanzar <- expand.grid(lanzar, lanzar, lanzar)
lanzar
lanza[lanzar$Var1=="S"]
View(lanzar)
lanzar[lanzar$Var1=="S"]
lanzar <- c("A", "S")
lanzar <- expand.grid(lanzar, lanzar, lanzar)
lanzar
lanzar[lanzar$Var1=="S"]
lanzar = data.frame(lanzar)
lanzar[lanzar$Var1=="S"]
lanzar
lanzar[lanzar$Var1 == "S"]
lanzar$Var1
table(lanzar$Var1)
lanzar[lanzar$Var1 == "S", ]
lanzar[lanzar$Var1 == "A", "A", ]
lanzar
lanzar[lanzar$Var1 == "A", lanzar$Var2 =="A", ]
lanzar[(lanzar$Var1 == "A"), (lanzar$Var2 =="A"), ]
lanzar[lanzar$Var1 == "S", ]
lanzar[lanzar$Var1 == "A", ]
ls
juego <- function(){
auto <- sample(1:3, 1)
catafixia <- sample(1:3, 1)
otras <- c(1:3)[-c(auto, catafixia)]
if(catafixia == premio){
cerrada <- sample(otras, 1)
}
else{
cerrada <- auto
}
cerrada == premio
}
sum(rdply(2000, juego)[, 2]) / 2000
library(plyr)
sum(rdply(2000, juego)[, 2]) / 2000
juego <- function(){
auto <- sample(1:3, 1)
catafixia <- sample(1:3, 1)
otras <- c(1:3)[-c(auto, catafixia)]
if(catafixia == premio){
cerrada <- sample(otras, 1)
}
else{
cerrada <- auto
}
# verificamos si el participante gana
cerrada == auto
}
library(plyr)
sum(rdply(2000, juego)[, 2]) / 2000
juego <- function(){
auto <- sample(1:3, 1)
catafixia <- sample(1:3, 1)
otras <- c(1:3)[-c(auto, catafixia)]
if(catafixia == auto){
cerrada <- sample(otras, 1)
}
else{
cerrada <- auto
}
# verificamos si el participante gana
cerrada == auto
}
sum(rdply(2000, juego)[, 2]) / 2000
juego
sum(rdply(2000, juego)[, 2]) / 2000
cambio #Probabilidad de ganar si se cambia la opción original
cambio <-sum(rdply(2000, juego)[, 2]) / 2000
cambio #Probabilidad de ganar si se cambia la opción original
no_cambio <- 1-cambio
no_cambio
auto <- sample(1:3, 2000, replace = TRUE)
catafixia <- sample(1:3, 2000, replace = TRUE)
mean(premio != catafixia)
mean(auto != catafixia)
class(x)
x <- 4
install.packages ("installr"); library(installr)
updareR()
updateR()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
est<-predict(fit,data.frame(x))
plot(x,y)
abline(fit,col="red")
summary(fit)
fit<-lm(y~x)
est<-predict(fit,data.frame(x))
plot(x,y)
abline(fit,col="red")
summary(fit)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
newdata <- data.frame(x=3000/1000)
p2 <- predict(fit, newdata, interval = ("prediction"))
print(p2)
print(coef)
print(coef)
n <- length(x)
(coef[2,1] + coef[2,2] * qt(0.025, n-2)) * 2
newdata <- data.frame(x=3000/1000)
p2 <- predict(fit, newdata, interval = ("prediction"))
print(p2)
print(coef)
n <- length(x)
(coef[2,1] + coef[2,2] * qt(0.025, n-2)) * 2
fit2<-lm(y~I(x/2))
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
D <- read.table("http://www.unalmed.edu.co/~ndgirald/Datos/Datos%20curso%20Series%20II/ventas%20al%20menudeo.dat",header=TRUE)
attach(D)
y = na.omit(RTRR)/10000
y = ts(y,frequency=12,start=c(1955,01))
# generar un vector de fechas, clase ’Date’
fechas = seq(as.Date("1955/1/1"), length.out = length(y), by =  "months")
# grafica con fechas
ts.plot(y,main="Ventas al menudeo en UDS de 1999")
# otros comandos para graficar con fechas con mas detalle: mes-año
np = length(y)
ejex.mes = seq(fechas[1],fechas[np], "months")
ejex.año = seq(fechas[1],fechas[np],"years")
plot(fechas,y, xaxt="n", panel.first = grid(),type='l',ylab='ventas.mes', lwd = 2)
axis.Date(1, at=ejex.mes, format="%m/%y")
axis.Date(1, at=ejex.año, labels = FALSE, tcl = -0.2)
# Generar datos para validacion cruzada: dejar el ultimo año
### Ajuste de los Modelos utilizando Regresión Lineal
T = length(y)
yi = y[1:(T-12)]
yf = y[(T-12+1):T]
# Ajustar 4 modelos: lineal, cuadrático, cúbico, log-lin
t = seq(1:(T-12))
t2 = t^2
t3 = t^3
lyi = log(yi)
# estimacion por minimos cuadrados ordinarios
mod.lin = lm(yi ̃t)
mod.cuad = lm(yi ̃t+t2)
mod.cub = lm(yi ̃t+t2+t3)
mod.llin = lm(lyi ̃t)
# auxiliar para el exponencial
summary(mod.lin)
summary(mod.cuad)
summary(mod.cub)
### Ajuste del Modelo Exponencial Lineal
# paso 1) estimar el modelo auxiliar log - linear
mod.llin = lm(lyi~t)
# paso 2) guardar los parametros del log-lineal
b0.est = mod.llin$coefficient[1]
b1.est = mod.llin$coefficient[2]
# paso 3) guardar los datos en un data.frame
Ds = data.frame(yi,t)
# paso 4) usar la funcion nls
mod.exp = nls(yi~exp(beta0+beta1*t),
data=Ds,
start=list(beta0=b0.est, beta1=b1.est))
# paso 5) resultados
summary(mod.exp)
### Calcular los Estad´ısticos de Selección del Modelo
medidas = function(m,y,k){
# y = serie, m = modelo, k = numero parametros
T = length(y)
yest = fitted(m)
sse = sum((yest-y)^2)
ssr = sum((y-mean(y))^2)
mse = sse/(T-k)
R2 = 1 - sse/ssr
Ra2 = 1 - (T-1)*(1-R2)/(T-k)
aic = log((T-k)*exp(2*k/T)*mse/T)
bic = log(T^(k/T)*(T-k)*mse/T)
M = c(Ra2, mse, aic, bic)
names(M) = c("R2-ajus","MSE","logAIC","logBIC")
return(M)}
M.lin = medidas(mod.lin,yi,2)
M.cuad = medidas(mod.cuad,yi,3)
M.cub = medidas(mod.cub,yi,4)
M.exp = medidas(mod.exp,yi,2)
M = cbind(M.lin,M.cuad,M.cub,M.exp)
(M)
### Hip´otesis del Modelo de Regresi ´on
r = mod.cuad$residuals
par(mfrow=c(2,2))
plot(t,r,type='o',ylab='residuo')
abline(h=0,lty=2)
plot(density(r),xlab='x',main= '')
qqnorm(r)
qqline(r,col=2)
acf(r,ci.type="ma",60)
### C ´alculo de Pron´osticos con el Modelo Cuadr ´atico
# Pron´osticos
tt = seq(482,493,1)
tt2 = tt^2
pr2 = predict(mod.cuad,data.frame(t=tt,t2=tt2))
plot(tt,yf,type="b")
lines(tt,pr2,col="red")
library(forecast)
library(lmtest)
library(xtable)
rm(list=ls())
graphics.off()
E = read.table("http://www.unalmed.edu.co/~ndgirald/Datos/Datos%20curso%20Series%20II/cementq.dat",skip=3, header=TRUE)
y = ts(y,frequency=4,start=c(1956,1),end=c(1994,3))
attach(E)
y = ts(y,frequency=4,start=c(1956,1),end=c(1994,3))
library("jpeg", lib.loc="~/R/win-library/3.1")
library("kernlab", lib.loc="~/R/win-library/3.1")
install.packages("combinant")
x <- c("S", "A", "S", "A", "S", "A")
comb(x, 3)
install.packages("Combine")
library (Combine)
comb(x, 3)
library("utils", lib.loc="C:/Program Files/R/R-3.1.2/library")
comb(x, 3)
combn(x, 3)
combn(x, 3, FUN = NULL)
install.packages("combinat")
require(combinat)
permn(3)
combn(3, 2)
combn(x, 3)
table(combn(x, 3))
as.table(combn(x, 3))
x <- c("S1", "A1", "S2", "A2", "S3", "A3")
as.table(combn(x, 3))
library (prob)
install.packages("prob")
library (prob)
tosscoin(1)
tosscoin(2)
tosscoin(1)
tosscoin(2)
tosscoin(3)
tosscoin(5)
x <- tosscoin(5)
rbinom(2, 5, 0.5)
rbinom(x, 5, 0.5)
dbinom(x, 5, 0.5)
dbinom(2, 5, 0.5)
dbinom(0, 5, 0.5)
P_0 <- dbinom(0, 5, 0.5)
P_1 <- dbinom(1, 5, 0.5)
P_2 <- dbinom(2, 5, 0.5)
P_3 <- dbinom(3, 5, 0.5)
P_4 <- dbinom(4, 5, 0.5)
P_5 <- dbinom(5, 5, 0.5)
P_T <- P_0+P_1+P_2+P_3+P_4
P_T
P_T <- P_0+P_1+P_2+P_3+P_4+P_5
P_T
P_6 <- dbinom(6,5,0.5)
P_6
barplot(dbinom(0:5,5,0.5))
P_7 <- dbinom(7,5,0.5)
P_7
GCL <- function (nsum, semilla, incremento, multiplicador, M){
seq <- semilla
for (i in 1:nsim){
new <- (seq[i] * multiplicador + incremento) %% M
seq <- c(seq, new)
}
return(seq)
}
GCL <- function (nsum, semilla, incremento, multiplicador, M){
seq <- semilla
for (i in 1:nsim){
new <- (seq[i] * multiplicador + incremento) %% M
seq <- c(seq, new)
}
return(seq/M)
}
GCL(20)
library(dplyr)
shiny::runApp('C:/Users/Liz Contreras/Downloads')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
install.packages("ggplot2")
install.packages("cowplot")
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Downloads')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
output$pvalK <- renderPrint({
require(vcd)
require(MASS)
# data generation
# estimate the parameters
fit2 <- fitdistr(x, "exponential")
# goodness of fit test
ks.test(x, "pexp", fit2$estimate)
})
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Downloads')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
runApp('C:/Users/Liz Contreras/Dropbox (Personal)/ITAM Otoño 2016/Estadística Computacional/Tareas/Tarea_1/Tarea_1')
